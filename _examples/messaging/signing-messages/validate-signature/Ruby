require 'socket'
require "net/http"
require "uri"
require 'digest'
require 'cgi'

def handle_delivery_receipt(request_line, security_secret)
#Parse the parameters and check if the message was delivered

  params = URI::decode_www_form(request_line).to_h
  if ! params["sig"].nil?
    now = Time.now.getutc.to_i
    message_timestamp = params['timestamp'].to_i
    max_delta = 5 * 60
    difference =  now - message_timestamp
    if ( difference.abs >  max_delta )
        p("Timestamp difference greater than 5 minutes")
    else
      #Remove the signature from the request parameters
      message_signature = params['sig']
      params['msisdn'] = params['/?msisdn']
      params.delete('sig')
      params.delete('/?msisdn')

      # Create the signing url using the sorted parameters and your SECURITY_SECRET
      signing_url = '&' + CGI::unescape(URI.encode_www_form(params.sort)) + security_secret
      #Add your md5 hash of your parameters to your parameters
      generated_signature = Digest::MD5.hexdigest(signing_url)

      if (secure_compare( message_signature, generated_signature))
        p("Message was sent by Nexmo");
      else
        print("Alert: message not sent by Nexmo!")
      end
    end
  end
end

# A timing attack safe string comparison
def secure_compare(a, b)
     return false if a.empty? || b.empty? || a.bytesize != b.bytesize
     l = a.unpack "C#{a.bytesize}"

     res = 0
     b.each_byte { |byte| res |= byte ^ l.shift }
     res == 0
   end

security_secret = 'SECURITY_SECRET'
# Initialize a TCPServer
server = TCPServer.new('', 9999)

# Wait for connections
loop do
  # Wait until a client connects
  socket = server.accept

  method, path = socket.gets.split
  #Check the signature
  handle_delivery_receipt(path, security_secret)

  # Return the 200 so Nexmo does not send the DLR to you repeatedly
  resp = "Thank you"
  headers = ["HTTP/1.1 200 OK",
             "Content-Type: text/html; charset=iso-8859-1",
             "Content-Length: #{resp.length}\r\n\r\n"].join("\r\n")
  socket.puts headers
  socket.puts resp
  # Close the socket, terminating the connection
  socket.close
end
