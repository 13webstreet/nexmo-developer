equire 'socket'
require 'uri'
require 'pstore'
require 'JSON'

def handle_inbound_message(request_line)

  #Parse the parameters and check if the message was delivered
  inbound_message = JSON.parse(request_line)
  ncco = [
      {
          "action": "talk",
          "text": "I'm sorry, I did not catch that. Please press 1 for maybe and 2 for not sure followed by the hash key",
          "voiceName": "Amy"
      },
      {
          "action": "input",
          "submitOnHash": "true",
          "eventUrl": ["https://example.com/ivr"]
      }
  ]
  #Create an NCCO in function of the button pressed by your user
  if (inbound_message['dtmf'] == '1')
    ncco = [
        {
          "action": "talk",
          "text": "Thank you, I'll forward you to the maybe department",
          "voiceName": "Amy"
        },
        {
          "action": "connect",
          "eventUrl": ["https://example.com/events"],
          "from": "441632960960",
          "endpoint": [
            {
              "type": "phone",
              "number": "441632960961"
            }
          ]
        }
      ]
  elsif (inbound_message['dtmf'] == '2')
    ncco = [
        {
          "action": "talk",
          "text": "Thank you, I'll forward you to the not sure department",
          "voiceName": "Amy"
        },
        {
          "action": "connect",
          "eventUrl": ["https://example.com/events"],
          "from": "441632960960",
          "endpoint": [
            {
              "type": "phone",
              "number": "441632960962"
            }
          ]
        }
      ]
  end
  return ncco
end

# Initialize a TCPServer
server = TCPServer.new('', 9999)

# Wait for connections
loop do
  # Wait until a client connects
  socket = server.accept
  method, path = socket.gets.split
  headers = {}
  while line = socket.gets.split(' ', 2)              # Collect HTTP headers
    break if line[0] == ""                            # Blank line means no more headers
    headers[line[0].chop] = line[1].strip             # Hash headers by type
  end
  content_length = headers["Content-Length"].to_i
  unless content_length == 0
    data = socket.read(content_length)
    ncco = handle_inbound_message(data)
  end

  # Return the 200 so Nexmo does not send the DLR to you repeatedly
  headers = ["HTTP/1.1 200 OK",
             "Content-Type: application/json",
             "Content-Length: #{resp.length}\r\n\r\n"].join("\r\n")
  socket.puts headers
  #return the NCCO
  socket.puts ncco
  # Close the socket, terminating the connection
  socket.close
end
