require 'socket'
require 'uri'
require 'pstore'
require 'JSON'

def handle_inbound_message(request_line)

  #Parse the parameters and check if the message was delivered
  inbound_message = JSON.parse(request_line)

  #Check the is an inbound message
  if (inbound_message['status'] == 'ringing')
    p ("Handle the conversation_uuid return parameter that identifies this Conversation")
  elsif (inbound_message['status'] == 'answered')
    p ("YYou use the uuid returned here for all API requests on individual calls")
  elsif (inbound_message['status'] == 'complete')
    #if you set eventUrl in your NCCO. The URL to download
    #the recording from is set in recording_url.
    #To download the recording
    #curl recording_url&api_key=***&api_secret=***” -o “recording.mp3”
  end
end

# Initialize a TCPServer
server = TCPServer.new('', 9999)

# Wait for connections
loop do
  # Wait until a client connects
  socket = server.accept
  method, path = socket.gets.split
  headers = {}
  while line = socket.gets.split(' ', 2)              # Collect HTTP headers
    break if line[0] == ""                            # Blank line means no more headers
    headers[line[0].chop] = line[1].strip             # Hash headers by type
  end
  content_length = headers["Content-Length"].to_i
  unless content_length == 0
    data = socket.read(content_length)
    handle_inbound_message(data)
  end

  # Return the 200 so Nexmo does not send the DLR to you repeatedly
  resp = "Thank you"
  headers = ["HTTP/1.1 200 OK",
             "Content-Type: text/html; charset=iso-8859-1",
             "Content-Length: #{resp.length}\r\n\r\n"].join("\r\n")
  socket.puts headers
  socket.puts resp
  # Close the socket, terminating the connection
  socket.close
end
