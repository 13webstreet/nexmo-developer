openapi: "3.0.0"
info:
  version: 0.3.0
  title: Workflows API
  description: 'The workflow API enables the developer to specify a multiple message workflow. A workflow follows a template. The first one we are adding is the failover template. The failover template instructs the messaging API to first send a message to the specified channel. If that message fails immediately or if the condition_status is not reached within the given time period the next message is sent. The developer will also recieve status webhooks from the messages resource for each delivery and read event.'
servers:
  - url: https://api.nexmo.com/beta
paths:
  /workflows:
    post:
      security:
        - bearerAuth: []
      summary: Create a workflow
      operationId: createWorkflow
      requestBody:
        description: Create a workflow request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWorkflow'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        message-status:
          '{$request.body#/callback}':
            post:
              summary: Message Status
              operationId: message-status
              x-example-path: '/webhooks/message-status'
              description: staus of the message read or delivered etc.
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/MessageStatus'
              responses:
                  '200':
                    description: Your server returns this code if it accepts the callback
        final-report:
          '{$request.body#/callback}':
            post:
              summary: The Final Report
              operationId: final-report
              x-example-path: '/webhooks/final-report'
              description: The final workflow callback is sent when The condition_status was met within the expiry_time. If we take the example API call above. If we received a delivered status at 300 seconds (within the expiry_time) the workflow would be marked as completed. We would not send an SMS. We would then send the final callback. The final message in the failover is delivered. If the message Errors on the last step we will send the final callback. Please note GET is not currently supported. You will notice we have an href to a resource in some of the callbacks. These will fail to load but we wanted to maintain the same structure so that we can seamlessly integrate GET later.
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/finalReport'
              responses:
                  '200':
                    description: Your server returns this code if it accepts the callback

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    createWorkflow:
      type: object
      properties:
        template:
          description: 'The template that the workflow API will execute. For the initial version of the API the only available value will be failover'
          type: string
          enum:
            - failover
          example: failover
        workflow:
          description: 'Contains a message object that must reflect the current /messages resource. All parameters within the content object reflect the /messages docs.'
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/sendMessage'
              - $ref: '#/components/schemas/sendWithFailoverMessage'

    ToProperty:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The type of message that you want to send.
          example: 'sms'
          enum:
            - sms
            - viber_service_msg
            - messenger
        id:
          description: |
            The ID of the message recipient.

            **Messenger**: This value should be the `from.id` value you received in the inbound messenger event.

            **SMS**: or **Viber**: This value is not required.
          type: string
          minLength: 1
          maxLength: 50
          example: '0123456789012345'
        number:
          type: string
          minLength: 1
          maxLength: 50
          example: '447700900000'
          description: |
            **SMS**: or **Viber**: The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format.

            **Messenger**: This value is not required.
        # @TODO Clarify requirements
        # name:
        #   description: 'Specify name to increase the match rate when using the Facebook Customer Matching service.'
        #   type: object
        #   required:
        #     - first_name
        #     - last_name
        #   properties:
        #     first_name:
        #       type: string
        #       description: The recipients first name.
        #       minLength: 1
        #       maxLength: 50
        #       example: 'John'
        #     last_name:
        #       type: string
        #       description: The recipients surname.
        #       minLength: 1
        #       maxLength: 50
        #       example: 'Smith'
    FromProperty:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The type of message that you want to send.
          example: sms
          enum:
            - sms
            - viber_service_msg
            - messenger
        id:
          description: |
            Your ID for the platform that you are sending from.

            **Messenger**: This value should be the `to.id` value you received in the inbound messenger event.

            **Viber**: This is your service message ID given to you by [Viber for Business](https://www.viber.com/viber-for-business/).

            **SMS**: This value is not required.
          type: string
          minLength: 1
          maxLength: 50
          example: '0123456789012345'
        number:
          type: string
          minLength: 1
          maxLength: 50
          example: '447700900000'
          description: |
            **SMS**: The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format.

            **Messenger**: or **Viber**: This value is not required.
    MessageProperty:
      type: object
      required:
        - content
      properties:
        viber_ttl:
          description: 'Only valid for Viber Service Messages. Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message. Please note that this cancels the notification on Android and an iOS the viber_expiry_text is shown. Minimum value is 30 and maximum value is 86,400 seconds (1 day).'
          type: integer
          example: 600
          minimum: 30
          maximum: 86400
        content:
          type: object
          properties:
            type:
              description: |
                The type of message that you are sending.

                **Messenger**: supports all types.

                **SMS** or **Viber**  only support `text`.
              type: string
              enum:
                - text
                - image
                - audio
                - video
                - file
              example: 'text'
            text:
              description: |
                The text of the message.

                **Messenger**: Is limited to 640 characters

                **SMS** or **Viber**: Is 1000 characters
              type: string
              minLength: 1
              maxLength: 1000
              example: 'Pretty majestical, aye?'
            url:
              type: string
              description: The URL for the attachment. Required for `image`, `audio`, `video` or `file`.
              minLength: 1
              maxLength: 1000
              example: 'http://example.com/image.jpg'
    TimestampProperty:
      type: string
      format: ISO 8601
      description: The datetime of when the event occurred.
      example: '2020-01-01T14:00:00.000Z'

    sendMessage:
      type: object
      description: 'Send Message'
      required:
        - to
        - from
        - message
      properties:
        to:
          $ref: '#/components/schemas/ToProperty'
        from:
          $ref: '#/components/schemas/FromProperty'
        message:
          $ref: '#/components/schemas/MessageProperty'

    sendWithFailoverMessage:
      type: object
      description: Send With Failover Message
      required:
        - to
        - from
        - message
      properties:
        to:
          $ref: '#/components/schemas/ToProperty'

    Response:
      required:
        - workflow_uuid
      type: object
      properties:
        worflow_uuid:
          type: string
          example: 'aaaaaaaa-bbbb-cccc-dddd-0123456789ab'

    Error:
      description: 'The error format is standardized to the 4xx/5xx range with a code and a human readable explanation.'
      required:
        - type
        - title
        - detail
        - instance
      type: object
      properties:
        type:
          type: string
          example: 'https://www.nexmo.com/messages/Errors#InvalidParams'
        detail:
          type: string
          example: 'Your request parameters did not validate.'
        instance:
          type: string
          example:
        invalid_parameters:
          type: object
          properties:
            name:
              type: string
              example: 'Invalid `from` parameter'
            reason:
              type: string
              example: 'Invalid `from` parameter'

    MessageStatus:
      description: 'The callbacks for the message status are the same as defined in the Messaging API. The only difference will be that workflow_uuid and link will be appended.'
      type: object
      properties:
        message_uuid:
          type: string
          example: 'aaaaaaaa-bbbb-cccc-dddd-0123456789ab'
        to:
          $ref: '#/components/schemas/ToProperty'
        from:
          $ref: '#/components/schemas/FromProperty'
        timestamp:
          $ref: '#/components/schemas/TimestampProperty'
        status:
          type: string
          example: delivered
          description: The status of the message.
          enum:
            - submitted
            - delivered
            - read
            - rejected
            - undeliverable
        error:
          type: object
          properties:
            code:
              type: integer
              example: 1300
              description: The error code. See [Errors](#errors) for a table of descriptions.
            reason:
              type: string
              example: 'Not part of the provider network'
              description: Text describing the error. See [Errors](#errors) for a more details.
        usage:
          type: object
          properties:
            currency:
              type: string
              example: EUR
              description: The charge currency in ISO 4217 format.
              enum:
                - EUR
            price:
              type: string
              example: '0.0333'
              description: The charge amount as a stringified number.
        _links:
          type: object
          properties:
            workflow:
              type: object
              properties:
                workflow_uuid:
                  type: string
                  example: 'aaaaaaaa-bbbb-cccc-dddd-0123456789ab'
                href:
                  type: string
                  example: '/workflows/aaaaaaaa-bbbb-cccc-dddd-0123456789ab'

    finalReport:
      type: object
      properties:
        workflow_uuid:
          type: string
          example: 'aaaaaaaa-bbbb-cccc-dddd-0123456789ab'
        template:
          type: string
          enum:
            - failover
          example: failover
        status:
          type: string
          enum:
            - completed
            - error
          example: completed
        timestamp:
          $ref: '#/components/schemas/TimestampProperty'
        usage:
          type: object
          description:  'This is the total cost of your Workflow request. Please note if a preceding message in the workflow request is delivered after the final message in the workflow is delivered it may not reflect the true total cost of the workflow.'
          properties:
            price:
              type: string
              example: "0.02"
            currency:
              type: string
              enum:
                - EUR
              example: 'EUR'
        _links:
          type: object
          properties:
            messages:
              type: array
              items:
                type: object
                properties:
                  message_uuid:
                    type: string
                    example: 'aaaaaaaa-bbbb-cccc-dddd-0123456789ab'
                  href:
                    type: string
                    example: 'aaaaaaaa-bbbb-cccc-dddd-0123456789ab'
                  channel:
                    type: string
                    enum:
                      - messenger
                      - viber_sevice_msg
                      - sms
                    example: viber_service_msg
                  usage:
                    type: object
                    properties:
                      currency:
                        type: string
                        example: EUR
                        description: The charge currency in ISO 4217 format.
                        enum:
                          - EUR
                      price:
                        type: string
                        example: '0.0333'
                        description: The charge amount as a stringified number.
                  status:
                    type: string
                    enum:
                      - submitted
                      - delivered
                      - read
                      - rejected
                      - undeliverable
